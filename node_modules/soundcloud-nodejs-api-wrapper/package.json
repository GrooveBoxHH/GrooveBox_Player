{
  "name": "soundcloud-nodejs-api-wrapper",
  "version": "0.2.3",
  "description": "Soundcloud Nodejs API Wrapper - connect to the soundcloud API with oauth and without any callback url.",
  "main": "index.js",
  "scripts": {
    "test": "node ./test/test.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/monbro/soundcloud-nodejs-api-wrapper"
  },
  "keywords": [
    "soundcloud",
    "api",
    "nodejs",
    "credentials",
    "token",
    "username",
    "serverside",
    "wrapper"
  ],
  "dependencies": {
    "merge": "1.2.0",
    "oauth": "0.9.12",
    "url": "0.10.2"
  },
  "author": {
    "name": "Michael Klein",
    "url": "https://github.com/monbro/"
  },
  "contributors": [
    {
      "name": "Ian Dilling",
      "url": "http://www.iandilling.com/"
    }
  ],
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/monbro/soundcloud-nodejs-api-wrapper/issues"
  },
  "gitHead": "e3ff694f76f3161ce23a45231f1be11d468090de",
  "readme": "soundcloud-nodejs-api-wrapper\n=============================\n\nSoundcloud Nodejs API Wrapper - connect to the soundcloud API with oauth and without any callback url.\nFor more details check the [Soundcloud API documentation](https://developers.soundcloud.com/docs/api/reference).\n\nOriginal NPM package (not maintained anymore) was [soundcloud-api](https://www.npmjs.com/package/soundcloud-api).\n\nDocumentation\n=============\n\n## Getting Started\n\nInclude the module and create a new Soundcloud object. Parameter is an object literal with the following values:\n* client_id : (string) Your apps client id.\n* client_secret : (string) Your apps client secret.\n* redirect_uri : (string) Your apps redirect_uri.\n* ssl : (boolean) If true, all API calls are HTTPS. Defaults to false.\n* username : A users username. Used for Oauth's User Credentials Flow. See below.\n* password : A users password. Used for Oauth's User Credentials Flow. See below.\n\nExample A with a redirect_uri:\n\n```js\nSC = require('soundcloud-nodejs-api-wrapper');\n\nvar sc = new SC({\n  client_id : 'YOUR_CLIENT_ID',\n  client_secret : 'YOUR_CLIENT_SECRET',\n  redirect_uri : 'YOUR_REDIRECT_URI'\n});\n```\n\nExample B without using a redirect_uri and without having a access token:\n\n```js\nSC = require('soundcloud-nodejs-api-wrapper');\n\nvar sc = new SC({\n  client_id : \"CLIENTID\",\n  client_secret : \"CLIENTSECRET\",\n  username : 'USERNAME',\n  password: 'PASSWORD'\n});\n\n// this client object will be explained more later on\nvar client = sc.client();\n\nclient.exchange_token(function(err, result) {\n\n  var access_token = arguments[3].access_token;\n  console.log('Our new access token \"'+access_token+'\" will expire in '+expires_in); // should show your new user token and when it will expire\n\n  console.log('Full API auth response was:');\n  console.log(arguments);\n\n  // we need to create a new client object which will use the access token now\n  var clientnew = sc.client({access_token : access_token});\n\n  clientnew.get('/me', {limit : 1}, function(err, result) {\n    if (err) console.error(err);\n    console.log(result); // should show a json object of your soundcloud user\n  });\n\n});\n```\n\n## The Client Object\nCalling sc.client() will instatiate a new client object.\n\nThe client takes in an object literal defining it's properties and Oauth credentials.\n* access_token : The access token obtained from Soundcloud\n* ssl : You can also specify the ssl setting in the client object too.\n\nTo exchange either a refresh_token, user credentials, or a redirect code, call the client's exchange_token function.\nIt has an optional parameter that takes in the redirect code.\n\n```js\nclient.exchange_token(code, function(err) {\n  if (err) console.log(err);\n  var access_token = arguments[3].access_token,\n      expires_in = arguments[3].expires_in;\n});\n```\n\nCurrently the exchange_token function gets the redirect code as a parameter, the refresh_token from the client object, and the user credentials from the main Soundcloud object. This is a bit confusing and is likely to change is future versions.\n\nThe client object can make GET, POST, PUT, and DELETE requests. See Soundcloud's HTTP API for reference on which API paths allow which requests.\n* client.get(path, filters(optional), [callback])\n* client.post(path, post_body, [callback])\n* client.put(path, post_body(optional), [callback])\n* client.delete(path, [callback])\n\n```js\nvar client = sc.client({access_token : 'VALID_ACCESS_TOKEN'});\n\nclient.get('/me', {limit : 1}, function(err, result) {\n  if (err) console.error(err);\n  console.log(result);\n});\n```\n\nBy default the client will try to treat the result as a json object and therefore to parse it via `JSON.parse()`. You can control this behaviour simply with the following commands:\n\n```js\nclient.parsePlain(); // will disable the json parsing for this client object\nClient.parseJson(); // will enable the json parsing for this client object, this is default\n```\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/monbro/soundcloud-nodejs-api-wrapper",
  "_id": "soundcloud-nodejs-api-wrapper@0.2.3",
  "_shasum": "23d8897a79651230a4e9067039a29cf052d18c9a",
  "_from": "git://github.com/monbro/soundcloud-nodejs-api-wrapper.git",
  "_resolved": "git://github.com/monbro/soundcloud-nodejs-api-wrapper.git#e3ff694f76f3161ce23a45231f1be11d468090de",
  "_fromGithub": true
}
